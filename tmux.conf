# Support rich colors
set-option -sa terminal-overrides ",xterm*:Tc"

# Set default terminal to xterm-256color instead of screen-256color
# I needed this to show color in valkey OSS tests which looks for xterm in $TERM env variable.
# <https://stackoverflow.com/questions/74786443/why-does-tmux-set-term-screen>
# Ran into trouble, disabling this
# set -g default-terminal "xterm-256color"

# The following is required to avoid rename <https://superuser.com/questions/306028/tmux-and-zsh-custom-prompt-bug-with-window-name>
# when using xterm-256color
# When this setting is enabled, will rename the window automatically using the format specified by
# automatic-rename-format. This flag is automatically disabled for an individual window when a name is specified at
# creation with new-window or new-session, or later with rename-window, or with a terminal escape sequence.
# set-window-option -g automatic-rename off

# Enable mouse support
set -g mouse on

# Move status bar to bottom
set-option -g status-position bottom

# TODO: Don't wrap around for window movement


# Don't wrap search. It can be confusing
set-option -g wrap-search off

# Set a bigger scroll back buffer
# This limit is per pane, it is not shared across panes.
# https://unix.stackexchange.com/questions/43414/unlimited-history-in-tmux (this should not be preallocated/hog memory)
set -g history-limit 999999999

# Using alternate screen, contents from any interactive programs like less or vim will be removed when closed, restoring
# the original content before less/vim was started.
set-option -g alternate-screen on

# Vim style pane selection

# The following uses h/j/k/l with control directly
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R # Note: this conflicts with C-l used to clear screen

# prefix h/j/k/l to navigate panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
# Note: this conflicts with go to last window. Use prefix b to go to last window since you use
# https://github.com/tmux-plugins/tmux-sensible
bind-key l select-pane -R

# Toggle synchronize panes by using prefix S
# https://stackoverflow.com/questions/25909964/tmux-how-to-toggle-on-and-off-options-with-the-same-key
bind-key S set-window-option synchronize-panes\; display-message "synchronize-panes: #{?pane_synchronized,on,off}"



# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# set vi-mode for navigating scrollback buffers
set-window-option -g mode-keys vi

# Use vim like visual mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# NOTE: In copy mode, $ selects till end of screen instead of stopping at the end of text. I haven't
#       found a way to stop at the end of text. The best work around at the moment is to use w to
#       navigate one word at a time or use f along with ; to jump to a specific character.

# Columnar visual selection is a lot of key strokes.
# 1. Enter visual mode: prefix + [
# 2. Switch to columnar selection: C-v
# 3. Start selection using Space
# 4. Move around to expand selection and press y to yank and exit copy mode.
#
# The following key binding tries to minimize the key strokes by combining 1-3. For my common
# usecase, I want to copy text from within neovim without copying the line number. I am already at a
# cursor location where I can start the visual selection.
bind-key v copy-mode \; send-keys C-v \; send-keys Space

# Open panes with current path
bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"


# Set default title of empty string, so the hostname doesn't show up as title
# bind-key c new-window -n ''

# Set pane title using <prefix> T
bind-key T command-prompt -p "New title:" 'select-pane -T "%%"'

# Reload the tmux configuration using prefix + R
# NOTE: prefix + r is the default key binding to force redraw the client.
#
# See https://man7.org/linux/man-pages/man1/tmux.1.html#DEFAULT_KEY_BINDINGS
bind R source-file ~/.config/tmux/tmux.conf \; display-message "tmux config reloaded."

# NOTE: I didn't find a need for this. I got these from <https://serverfault.com/questions/963318/tmux-status-bar-default-window-names>
# Attempt to set the client terminal title
# set -g set-titles on
# allow programs in the pane to change the window name using a terminal escape sequence?
# setw -g allow-rename on
# When this setting is enabled, will rename the window automatically using the format specified by
# automatic-rename-format. This flag is automatically disabled for an individual window when a name is specified at
# creation with new-window or new-session, or later with rename-window, or with a terminal escape sequence.
# setw -g automatic-rename on


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible' # See https://github.com/tmux-plugins/tmux-sensible for the changes

# Save and restore tmux session across system reboot
# https://github.com/tmux-plugins/tmux-resurrect
# Default key bindings
#
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
#
# NOTE: The above keybindings require you to use Ctrl. Without it, there are default tmux
#       keybindings.
#       prefix + s : Select a new session for the attached client interactively.
#       prefix + r : force redraw the attached client.
set -g @plugin 'tmux-plugins/tmux-resurrect'

# https://github.com/christoomey/vim-tmux-navigator
# Use C-h/j/k/l to move across panes. Note C-l conflicts with clear screen
# set -g @plugin 'christoomey/vim-tmux-navigator' # vim based navigation

# This helps copy to system clipboard and also to paste from system clipboard.
# Without this, accessing system clipboard from tmux is cumbersome.
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'primary'


# TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"
TMUX_FZF_ORDER="pane|window"

# Default value in tmux >= 3.2
TMUX_FZF_OPTIONS="-p -w 80% -h 50% -m"
TMUX_FZF_PREVIEW=0
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command}"

# <https://github.com/sainnhe/tmux-fzf>
# Requires fzf to be installed <https://github.com/junegunn/fzf/>
# fzf search for sessions, windows and panes. Press <prefix> F (shift F) to launch
set -g @plugin 'sainnhe/tmux-fzf'


set -g @catppuccin_flavor 'mocha' # default is mocha
set -g @plugin 'catppuccin/tmux' # Theme

set -g @catppuccin_status_modules_right "directory date_time"
set -g @catppuccin_date_time_text "%Y-%m-%d %H:%M"

# NOTE: These were the initial simple configuration that I used. Now I used conditionals below that shows pane title if
# set. every window
#set -g @catppuccin_window_default_text "#T: #W"
#set -g @catppuccin_window_default_fill "number"

# only current window
# See <https://man7.org/linux/man-pages/man1/tmux.1.html> for #F #I #W etc
# <https://stackoverflow.com/questions/28376611/how-to-automatically-rename-tmux-windows-to-the-current-directory> shows
# good examples of configuring the text.
#set -g @catppuccin_window_current_text "#[fg=orange,bold]#T: #W#F" # #T shows pane title, #W shows program name. Current app. #F shows *
#set -g @catppuccin_window_current_fill "number" # number, all , none

# every window
# See below for an explanation of the conditional
set -g @catppuccin_window_default_text "#{?#{==:#T,#{host}}, #W , #T: #W }"
set -g @catppuccin_window_default_fill "number"
# Got the dull color from https://www.color-hex.com/color-palette/80211
set -g @catppuccin_window_default_color "#c9e9e7"
set -g @catppuccin_window_default_background "black"

# See https://man7.org/linux/man-pages/man1/tmux.1.html#STYLES
set -g @catppuccin_pane_border_style "fg=#{thm_white}" # Use a value compatible with the standard tmux 'pane-border-style'
set -g @catppuccin_pane_active_border_style "fg=#{thm_orange}" # Use a value compatible with the standard tmux 'pane-border-active-style'

# This tries to simulate dimming of inactive panes by using a different background color for active
# and inactive panes. This is not perfect - if neovim is one in one of the inactive pane, the
# background is unaffected by these configurations.
# Set background color for every pane (we will use this for inactive pane)
set -g window-style 'bg=#333333'
# Set background color for active pane. This is close to the normal catppuccin mocha background
set -g window-active-style 'bg=#1E1E2E'

# only current window
# See <https://man7.org/linux/man-pages/man1/tmux.1.html> for #F #I #W etc
# <https://stackoverflow.com/questions/28376611/how-to-automatically-rename-tmux-windows-to-the-current-directory> shows
# good examples of configuring the text.
#
# Here is the conditional in plain english (you will understand this easily if you read FORMATS in tmux man page)
# if #{host} == #T {  # Current pane title is the same as hostname
#   # Use empty string
# } else {
#   # Show pane title
# }
#
# #T shows pane title, #W shows program name. Current app. #F shows *
# Space is for better asthetics
set -g @catppuccin_window_current_text "#[fg=orange,bold,reverse]#{?#{==:#T,#{host}},     #W#F     ,     #T: #W#F     }"
set -g @catppuccin_window_current_fill "number" # number, all , none

# Added this to avoid warning about the change in configuration. See https://github.com/catppuccin/tmux/issues/293
set -g @catppuccin_window_status "icon"
set -g @catppuccin_window_status_icon "icon"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

