# Debug tmux startup time
# This will create a new session, wait for it to be ready and then immediately kill it. This shows the actual time it
# takes to create the session.
# time tmux new-session -d && tmux kill-session

# This show the startup of time of a tmux session with no configuration.
# time tmux -f /dev/null new-session -d && tmux kill-session


# set is just an alias for set-option
# The -g flag makes the option global (applies to all sessions)
# -w sets window options
# -u unsets an option
# -a appends an option

# Print the current prefix using
# tmux show-options -g prefix

# Print all globals using
# tmux show-options -g

# For some settings to take effect, sourcing the tmux.conf won't be enough, you will have to kill the tmux servers.
# tmux kill-server

# Use a different prefix if you want
# Define the "variable" prefix
# set-option -g prefix C-a
# Actually send prefix when the keybinding is pressed.
# bind C-a send-prefix
# Unbind the original prefix
# unbind C-b

# Support rich colors
set-option -sa terminal-overrides ",xterm*:Tc"

# Set default terminal to xterm-256color instead of screen-256color
# I needed this to show color in valkey OSS tests which looks for xterm in $TERM env variable.
# <https://stackoverflow.com/questions/74786443/why-does-tmux-set-term-screen>
# Ran into trouble, disabling this
# set -g default-terminal "xterm-256color"

# The following is required to avoid rename <https://superuser.com/questions/306028/tmux-and-zsh-custom-prompt-bug-with-window-name>
# when using xterm-256color
# When this setting is enabled, will rename the window automatically using the format specified by
# automatic-rename-format. This flag is automatically disabled for an individual window when a name is specified at
# creation with new-window or new-session, or later with rename-window, or with a terminal escape sequence.
# set-window-option -g automatic-rename off

# Enable mouse support
set -g mouse on

# Move status bar to bottom
set-option -g status-position bottom

# Monitor activity in the window and show an indicator in the status bar
set-option -g monitor-activity on

# Don't wrap search. It can be confusing
set-option -g wrap-search off

# Set a bigger scroll back buffer
# This limit is per pane, it is not shared across panes.
# https://unix.stackexchange.com/questions/43414/unlimited-history-in-tmux (this should not be preallocated/hog memory)
set -g history-limit 999999999

# Using alternate screen, contents from any interactive programs like less or vim will be removed when closed, restoring
# the original content before less/vim was started.
set-option -g alternate-screen on

# Vim style pane selection

# The following uses h/j/k/l with control directly
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R # Note: this conflicts with C-l used to clear screen

# This is a workaround to prevent wrap around behavior as tmux maintainers are not interested in
# supporting a config for this. <https://github.com/tmux/tmux/issues/47>
unbind Up
unbind Down
unbind Right
unbind Left
# tmux display-message -p '#{pane_at_top}' will return 1 if this is the topmost pane. So, the idea
# is to do select-pane -U only if the current pane is not the top most pane. Similar logic is used
# for other directions.
# Also use <prefix> h/j/k/l to navigate panes
bind Up run-shell "if [ $(tmux display-message -p '#{pane_at_top}') -ne 1 ]; then tmux select-pane -U; fi"
bind-key k run-shell "if [ $(tmux display-message -p '#{pane_at_top}') -ne 1 ]; then tmux select-pane -U; fi"

bind Down run-shell "if [ $(tmux display-message -p '#{pane_at_bottom}') -ne 1 ] ; then tmux select-pane -D; fi"
bind-key j run-shell "if [ $(tmux display-message -p '#{pane_at_bottom}') -ne 1 ] ; then tmux select-pane -D; fi"

bind Right run-shell "if [ $(tmux display-message -p '#{pane_at_right}') -ne 1 ]; then tmux select-pane -R; fi"
# Note: this conflicts with go to last window. Use prefix b to go to last window since you use
# https://github.com/tmux-plugins/tmux-sensible
bind-key l run-shell "if [ $(tmux display-message -p '#{pane_at_right}') -ne 1 ]; then tmux select-pane -R; fi"

bind Left run-shell "if [ $(tmux display-message -p '#{pane_at_left}') -ne 1 ]; then tmux select-pane -L; fi"
bind-key h run-shell "if [ $(tmux display-message -p '#{pane_at_left}') -ne 1 ]; then tmux select-pane -L; fi"

# Toggle synchronize panes by using prefix S
# https://stackoverflow.com/questions/25909964/tmux-how-to-toggle-on-and-off-options-with-the-same-key
bind-key S set-window-option synchronize-panes\; display-message "synchronize-panes: #{?pane_synchronized,on,off}"



# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# set vi-mode for navigating scrollback buffers
set-window-option -g mode-keys vi

# Use vim like visual mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# NOTE: In copy mode, $ selects till end of screen instead of stopping at the end of text. I haven't
#       found a way to stop at the end of text. The best work around at the moment is to use w to
#       navigate one word at a time or use f along with ; to jump to a specific character.

# Columnar visual selection is a lot of key strokes.
# 1. Enter visual mode: prefix + [
# 2. Switch to columnar selection: C-v
# 3. Start selection using Space
# 4. Move around to expand selection and press y to yank and exit copy mode.
#
# The following key binding tries to minimize the key strokes by combining 1-3. For my common
# usecase, I want to copy text from within neovim without copying the line number. I am already at a
# cursor location where I can start the visual selection.
bind-key v copy-mode \; send-keys C-v \; send-keys Space

# Open panes with current path
bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"


# Set default title of empty string, so the hostname doesn't show up as title
# bind-key c new-window -n ''

# Set pane title using <prefix> T
bind-key T command-prompt -p "New title:" 'select-pane -T "%%"'

# Reload the tmux configuration using prefix + R
# NOTE: prefix + r is the default key binding to force redraw the client.
#
# See https://man7.org/linux/man-pages/man1/tmux.1.html#DEFAULT_KEY_BINDINGS
bind R source-file ~/.config/tmux/tmux.conf \; display-message "tmux config reloaded."

# NOTE: I didn't find a need for this. I got these from <https://serverfault.com/questions/963318/tmux-status-bar-default-window-names>
# Attempt to set the client terminal title
# set -g set-titles on
# allow programs in the pane to change the window name using a terminal escape sequence?
# setw -g allow-rename on
# When this setting is enabled, will rename the window automatically using the format specified by
# automatic-rename-format. This flag is automatically disabled for an individual window when a name is specified at
# creation with new-window or new-session, or later with rename-window, or with a terminal escape sequence.
# setw -g automatic-rename on

# Escape time in ms. Lower time helps improve the responsiveness on neovim inside tmux.
#
# Set the time in milliseconds for which tmux waits after an escape is input to determine if it is part of a function or
# meta key sequences.
set -g escape-time 10

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible' # See https://github.com/tmux-plugins/tmux-sensible for the changes

# Fingers help jump to locations in the copy buffer with characters like vimium.
# Use <prefix> J to jump.
# Note that the default keybinding of F collides with the default of tmux-fzf
# Install crystal programming language (the language in which tmux-fingers is written)
# https://crystal-lang.org/install/#linux
# curl -OfsSL https://crystal-lang.org/install.sh && chmod +x install.sh && sudo ./install.sh
# I couldn't install crystal in AL2 easily. I find that the tmux-fuzzback is more useful that this. So disabling this
# for the time being.
# set -g @plugin 'Morantron/tmux-fingers'

# Search the scrollback buffer using fzf and jump to the line that matches the search
set -g @plugin 'roosta/tmux-fuzzback'
# The default binding of <prefix> ? collides with the tmux keybinding help. So, I am repurposing the f which is already
# used to find in scrollback buffer.
set -g @fuzzback-bind f
# Show a popup for the search instead of showing it in the command line itself.
set -g @fuzzback-popup 1
# Preview shows the context of a match. I find this indispensable to navigate efficiently.
set -g @fuzzback-hide-preview 0
# Make the popup bigger. The default is very small and with the preview, it is not enough real estate to see the results.
set -g @fuzzback-popup-size '90%'

# FIXME: Couldn't get this to work with catppuccin.
set -g @plugin 'MunifTanjim/tmux-mode-indicator'
# set-option -g status-left " #{tmux_mode_indicator} "

# Save and restore tmux session across system reboot
# https://github.com/tmux-plugins/tmux-resurrect
# Default key bindings
#
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
#
# NOTE: The above keybindings require you to use Ctrl. Without it, there are default tmux
#       keybindings.
#       prefix + s : Select a new session for the attached client interactively.
#       prefix + r : force redraw the attached client.
set -g @plugin 'tmux-plugins/tmux-resurrect'

# https://github.com/christoomey/vim-tmux-navigator
# Use C-h/j/k/l to move across panes. Note C-l conflicts with clear screen
# set -g @plugin 'christoomey/vim-tmux-navigator' # vim based navigation

# This helps copy to system clipboard and also to paste from system clipboard.
# Without this, accessing system clipboard from tmux is cumbersome.
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'primary'

# tmux automatically synchronizes its internal clipboard (copy-paste buffer) with the system clipboard.
set -s set-clipboard on
# For linux only. /proc/version is not found in Mac
if-shell '[ -f /proc/version ]' \
    'set -g @custom_copy_command "nc localhost 19999"'

# rose-pine also uses the same directory of tmux used by catppuccin. So, tpm won't download one theme if you already have the other.
# set -g @plugin 'rose-pine/tmux'
# set -g @rose_pine_variant 'main'

# TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"
TMUX_FZF_ORDER="pane|window"

# Default value in tmux >= 3.2
TMUX_FZF_OPTIONS="-p -w 80% -h 50% -m"
TMUX_FZF_PREVIEW=0
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command}"

# <https://github.com/sainnhe/tmux-fzf>
# Requires fzf to be installed <https://github.com/junegunn/fzf/>
# fzf search for sessions, windows and panes. Press <prefix> F (shift F) to launch
set -g @plugin 'sainnhe/tmux-fzf'


# Note that source-file uses cwd of the shell for relative path resolution. So, always specify the path from the home
# directory (i.e. ~/) so that it works across directories.
########################################################################
# THEME - dracula
########################################################################

# source-file ~/.config/tmux/dracula.conf

########################################################################
# THEME - catppuccin
########################################################################

# source-file ~/.config/tmux/catppuccin.conf
source-file ~/.config/tmux/catppuccin-latest.conf

########################################################################

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# tmux run-shell ~/.tmux/plugins/tpm/bin/install_plugins
# tmux run-shell ~/.tmux/plugins/tpm/bin/update_plugins all
# tmux run-shell ~/.tmux/plugins/tpm/bin/clean_plugins
